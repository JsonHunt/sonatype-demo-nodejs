// Generated by CoffeeScript 2.3.2
(function() {
  var capitalize, peekEnd, peekStart, removeEnd, removeStart, words;

  words = require('./words');

  capitalize = function(str) {
    return str.substr(0, 1).toUpperCase() + str.substr(1);
  };

  peekStart = function(str, howMany) {
    return str.substr(0, howMany);
  };

  removeStart = function(str, howMany) {
    return str.substr(howMany);
  };

  peekEnd = function(str, howMany) {
    return str.substr(-howMany);
  };

  removeEnd = function(str, howMany) {
    return str.substr(0, str.length - howMany);
  };

  module.exports = {
    addSpace: function(str) {
      if ((str.length > 0) && (str[str.length - 1] !== ' ')) {
        return str + ' ';
      } else {
        return str;
      }
    },
    validateInteger: function(str) {
      return /^-?\d+$/.test(str);
    },
    translatePart: function(part, useAnd) {
      var hasAnd, hun, ones, tens, text;
      while (part[0] === '0') {
        part = removeStart(part, 1);
      }
      text = "";
      if (part.length === 3) {
        hun = parseInt(part[0]);
        part = removeStart(part, 1);
      }
      if (part.length === 2) {
        tens = parseInt(part[0]);
        if (tens === 1) {
          tens = parseInt(part);
          part = removeStart(part, 2);
        } else {
          tens *= 10;
          part = removeStart(part, 1);
        }
      }
      if (part.length === 1) {
        ones = parseInt(part[0]);
      }
      hasAnd = useAnd && (tens || ones);
      if (hun) {
        text += words[hun] + ' ' + words[100];
      }
      if (hasAnd) {
        text = this.addSpace(text) + 'and';
      }
      if (tens) {
        text = this.addSpace(text) + words[tens];
      }
      if (ones) {
        text = this.addSpace(text) + words[ones];
      }
      return text;
    },
    getParts: function(str) {
      var parts;
      parts = [];
      while (str.length > 2) {
        parts.push(peekEnd(str, 3));
        str = removeEnd(str, 3);
      }
      if (str.length > 0) {
        parts.push(str);
      }
      parts.reverse();
      return parts;
    },
    translate: function(number) {
      var isNegative, isValid, parts, text, useAnd;
      text = "";
      if ((number === void 0) || (number.length === 0)) {
        throw new Error("Missing parameter. Integer is required");
      }
      isValid = this.validateInteger(number);
      if (!isValid) {
        throw new Error('Invalid parameter. Only integers are allowed');
      } else {
        if (number.indexOf("-") === 0) {
          isNegative = true;
          number = number.substr(1);
        }
        parts = this.getParts(number);
        while (parts.length > 0) {
          useAnd = parts.length === 1;
          text += this.translatePart(parts[0], useAnd);
          parts.shift();
          if (parts.length > 0) {
            text += ' ' + words.bigNumbers[parts.length] + ' ';
          }
        }
        if (isNegative) {
          text = words['-'] + ' ' + text;
        }
        return capitalize(text.trim());
      }
    }
  };

}).call(this);
